// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/ucladevx/BPool/models"

import stores "github.com/ucladevx/BPool/stores"

// RatingStore is an autogenerated mock type for the RatingStore type
type RatingStore struct {
	mock.Mock
}

// Average provides a mock function with given fields: _a0
func (_m *RatingStore) Average(_a0 string) (float32, error) {
	ret := _m.Called(_a0)

	var r0 float32
	if rf, ok := ret.Get(0).(func(string) float32); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(float32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0
func (_m *RatingStore) Delete(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: _a0
func (_m *RatingStore) GetByID(_a0 string) (*models.Rating, error) {
	ret := _m.Called(_a0)

	var r0 *models.Rating
	if rf, ok := ret.Get(0).(func(string) *models.Rating); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Rating)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: rating
func (_m *RatingStore) Insert(rating *models.Rating) error {
	ret := _m.Called(rating)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Rating) error); ok {
		r0 = rf(rating)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WhereMany provides a mock function with given fields: _a0
func (_m *RatingStore) WhereMany(_a0 []stores.QueryModifier) ([]*models.Rating, error) {
	ret := _m.Called(_a0)

	var r0 []*models.Rating
	if rf, ok := ret.Get(0).(func([]stores.QueryModifier) []*models.Rating); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Rating)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]stores.QueryModifier) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
