// Code generated by mockery v1.0.0
package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/ucladevx/BPool/models"

// RideStore is an autogenerated mock type for the RideStore type
type RideStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *RideStore) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: lastID, limit
func (_m *RideStore) GetAll(lastID string, limit int) ([]*models.Ride, error) {
	ret := _m.Called(lastID, limit)

	var r0 []*models.Ride
	if rf, ok := ret.Get(0).(func(string, int) []*models.Ride); ok {
		r0 = rf(lastID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Ride)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(lastID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *RideStore) GetByID(id string) (*models.Ride, error) {
	ret := _m.Called(id)

	var r0 *models.Ride
	if rf, ok := ret.Get(0).(func(string) *models.Ride); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Ride)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ride
func (_m *RideStore) Insert(ride *models.Ride) error {
	ret := _m.Called(ride)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Ride) error); ok {
		r0 = rf(ride)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ride
func (_m *RideStore) Update(ride *models.Ride) error {
	ret := _m.Called(ride)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Ride) error); ok {
		r0 = rf(ride)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
